import { parse, HTMLElement } from 'node-html-parser';
import { sleep } from '../lib/common';
import { IS_LOCAL_MACHINE } from '../data/environment';
import { saveFile } from '../lib/file';
import { getArticleDetail, getArticleDetailImages, getArticles } from '../lib/land';
import { addDocuments, overwriteRooms, updateMyHomeRoomDetail } from '../lib/mongo';
import { Room, RoomDetail, SearchArticleRequest } from '../type/land';

export async function getArticleList(requestParam: SearchArticleRequest, maxPage = Number.MAX_SAFE_INTEGER) {
    try {
        const rooms: Room[] = [];
        let page = 1;
        while (page <= maxPage) {
            const room = await getArticles(requestParam, page);
            Object.assign(rooms, [...rooms, ...room]);
            page += 1;
            if (room.length === 20) {
                console.log(`    üöö Îß§Î¨º Î™©Î°ù Ï§ë ${page - 1}ÌéòÏù¥ÏßÄ ÏàòÏßëÏùÑ Ï¢ÖÎ£å. ${page}ÌéòÏù¥ÏßÄ Ï†ïÎ≥¥Î•º ÏàòÏßëÌï©ÎãàÎã§`);
                await sleep(Math.round(Math.random() * 1000 + 500));
            } else {
                console.log(`    üöß ${requestParam.cortarNo} Îß§Î¨º Î™©Î°ù ÏàòÏßëÏùÑ Ï¢ÖÎ£åÌï©ÎãàÎã§...`);
                break;
            }
        }
        return rooms;
    } catch (e) {
        console.error('getArticleList', e);
        throw e;
    }
}

export async function writeDocumentsForRooms(rooms: Room[]) {
    if (IS_LOCAL_MACHINE) {
        await saveFile(`article-list-${Date.now()}.json`, JSON.stringify(rooms, null, 4));
    } else {
        await addDocuments('daily', rooms);
        await overwriteRooms(rooms);
    }
}

export async function getDetail(articleNo: number | string) {
    try {
        return await getArticleDetail(articleNo);
    } catch (e) {
        console.error('getDetail', e);
        throw e;
    }
}

export async function getDetailImages(articleNo: number | string): Promise<string[]> {
    try {
        const response = await getArticleDetailImages(articleNo);
        const dom = parse(response);
        const nodes = dom.querySelectorAll('li.photo_list_item > div > a');
        const styles = nodes.map((node) => node.getAttribute('style'));
        return styles.map((style) => style?.substring(style.search(/https\:\/\//), style.search(/\)$/)) || '');
    } catch (e) {
        console.error('getDetailImages', e);
        throw e;
    }
}

export async function writeDocumentsForRoomDetail(articleNo: number | string, content: string): Promise<boolean> {
    try {
        console.log(`        üîç ${articleNo}Î≤à Îß§Î¨º ÏÉÅÏÑ∏ Ï†ïÎ≥¥Î•º ÌååÏã±Ìï©ÎãàÎã§`);
        const result: RoomDetail = {
            property: {},
            facility: {},
            images: [],
        };
        const dom = parse(content);

        // 1. Îß§Î¨º Ï†ïÎ≥¥
        const details = dom.querySelectorAll('.detail_row_cell');
        const property: { [key: string]: string } = {};
        console.log(`        üß± ${details.length}Í∞ú Îß§Î¨º ÏÜçÏÑ± ÌååÏã±ÌïòÍ∏∞`);
        for (const node of details) {
            const key = node.querySelector('.detail_cell_title')?.innerText || '';
            const value = node.querySelector('.detail_cell_data')?.innerText || '';
            if (key) property[key] = value;
        }
        result.property = property;

        // 2. Î∞© ÎÇ¥Î∂Ä ÏãúÏÑ§
        const getInnerText = (nodes: HTMLElement[]): string[] =>
            nodes.map((node) => node.innerText || '').filter((s) => !!s);
        const facilitiesNodes = dom.querySelectorAll('.detail_facilities');

        if (facilitiesNodes.length) {
            const facilities: { [key: string]: string } = {
                'Î∞© ÎÇ¥Î∂ÄÏãúÏÑ§': 'room',
                'Î≥¥Ïïà/ÏÉùÌôúÏãúÏÑ§': 'security',
                'Ï£ºÎ≥Ä Ìé∏ÏùòÏãúÏÑ§/1km Ïù¥ÎÇ¥': 'neighborhood',
            };
            facilitiesNodes.forEach((facility) => {
                const title = facility.querySelector('.detail_head_title')?.innerText;
                if (title) {
                    const key = facilities[title] || title;
                    result.facility[key] = getInnerText(facility.querySelectorAll('.detail_info_title'));
                    !IS_LOCAL_MACHINE && console.log(result.facility);
                }
            });
        }

        // 3. Ïù¥ÎØ∏ÏßÄ ÌååÏã±
        result.images = await getDetailImages(articleNo);
        console.log('    ', JSON.stringify(result.images, null, 3));

        // 4. Ï£ºÏÜå
        result.address = dom.querySelector('em.detail_info_branch')?.innerText.trim();

        IS_LOCAL_MACHINE
            ? await saveFile(`article-detail-${articleNo}-${Date.now()}.json`, JSON.stringify(result, null, 3))
            : await updateMyHomeRoomDetail(articleNo, result);

        return true;
    } catch (e) {
        console.error('writeDocumentsForRoomDetail', e);
        throw e;
    }
}
